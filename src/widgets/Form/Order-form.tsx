"use client"

import React from "react"

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"

import { toast } from "@/hooks/use-toast"
import { Button } from "@/shared/ui/button"
import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from "@/shared/ui/form"
import { Input } from "@/shared/ui/input"
import { Textarea } from "@/shared/ui/textarea"

// ‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –Ω–∞ –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
const FormSchema = z.object({
    username: z.string().min(1, { message: "–í–≤–µ–¥–∏—Ç–µ –∏–º—è" }),
    phone: z.string()
        .min(1, { message: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω" })
        .refine(val => {
            const digitsOnly = val.replace(/\D/g, "");
            return digitsOnly.length >= 10;
        }, { message: "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä" }),
    bio: z.string()
        .min(1, { message: "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ" })
        .max(800, { message: "–ú–∞–∫—Å–∏–º—É–º 800 —Å–∏–º–≤–æ–ª–æ–≤" }),
})

export function OrderForm() {
    const form = useForm<z.infer<typeof FormSchema>>({
        resolver: zodResolver(FormSchema),
        defaultValues: {
            username: "",
            phone: "",
            bio: "",
        },
    })

    const [isSubmitting, setIsSubmitting] = React.useState(false)

    async function sendTelegramMessage(data: z.infer<typeof FormSchema>) {
        const TOKEN = "7609911041:AAEukD-G3bxU8MiuyikUhe9us042dzsRfBo"
        const CHAT_ID = "-4727934737"
        const message = `üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:

üë§ –ò–º—è: ${data.username}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${data.bio}`

        const url = `https://api.telegram.org/bot${TOKEN}/sendMessage`

        await fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                chat_id: CHAT_ID,
                text: message,
                parse_mode: "HTML",
            }),
        })
    }

    async function onSubmit(data: z.infer<typeof FormSchema>) {
        try {
            setIsSubmitting(true)
            await sendTelegramMessage(data)
            toast({
                title: "–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                description: "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É. –°–ø–∞—Å–∏–±–æ!",
            })
            form.reset()
        } catch (error) {
            console.error(error)
            toast({
                title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
                description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                variant: "destructive",
            })
        } finally {
            setIsSubmitting(false)
        }
    }

    // –ú–∞—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    function handlePhoneChange(e: React.ChangeEvent<HTMLInputElement>) {
        let value = e.target.value;

        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –ø–ª—é—Å–∞ –∏ –ø—Ä–æ–±–µ–ª–∞
        value = value.replace(/[^\d+ ]/g, "");

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "+"
        if (!value.startsWith("+")) {
            value = "+" + value.replace(/\+/g, "");
        }

        // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
        value = value.replace(/ {2,}/g, " ");

        form.setValue("phone", value);
    }

    return (
        <Form {...form}>
            <form
                onSubmit={form.handleSubmit(onSubmit)}
                className="space-y-6 min-h-full items-stretch relative w-full py-formSpaceYPadding px-formSpaceXPadding duration-300 text-background mb-[50px]"
            >
                <h3 className="text-orderContactsSize mb-orderContactsMargin font-semibold text-background">
                    –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
                </h3>

                <FormField
                    control={form.control}
                    name="username"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel className="text-[22px]">–ò–º—è</FormLabel>
                            <FormControl className="text-background">
                                <Input
                                    className="text-background"
                                    placeholder="–ò–º—è"
                                    {...field}
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                <FormField
                    control={form.control}
                    name="phone"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel className="text-[22px]">–¢–µ–ª–µ—Ñ–æ–Ω</FormLabel>
                            <FormControl className="text-background">
                                <Input
                                    className="text-background"
                                    value={field.value}
                                    onChange={handlePhoneChange}
                                    placeholder="+7 (000) 000-00-00"
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                <h3 className="text-orderContactsSize mb-orderContactsMargin font-semibold">
                    –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –≤–∞—à—É –∑–∞–¥–∞—á—É
                </h3>

                <FormField
                    control={form.control}
                    name="bio"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel className="text-[22px]">–û–ø–∏—Å–∞–Ω–∏–µ</FormLabel>
                            <FormControl>
                                <Textarea
                                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
                                    className="resize-none"
                                    {...field}
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                <div
                    className="g-recaptcha"
                    data-sitekey="6LcHvZ8qAAAAAPcsVxxP3LUyUVRMBwKpMD-ApTjg"
                ></div>

                <Button
                    className="rounded-[50px] px-10 py-6 text-[20px] tracking-wide bg-mainColor hover:bg-darkMain duration-300 hover:duration-150"
                    type="submit"
                    disabled={isSubmitting}
                >
                    {isSubmitting ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
                </Button>
            </form>
        </Form>
    )
}